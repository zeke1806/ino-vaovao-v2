# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateDiscussionInput {
  members: [Float!]!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Discussion {
  creator: User!
  id: Float!
  lastMessage(clientId: Float!): LastMessage
  members: [User!]!
  name: String!
}

type FriendHistory {
  accepted: Boolean!
  friend: User!
  user: User!
}

type LastMessage {
  message: Message!
  view: Boolean!
}

type LoginError {
  incorrectInfo: String!
}

input LoginInput {
  password: String!
  username: String!
}

union LoginResult = LoginError | LoginToken

type LoginToken {
  token: String!
}

type Message {
  content: String!
  createdAt: DateTime!
  discussionId: Float!
  id: Float!
  sender: User!
}

type MessagesResult {
  data: [Message!]!
  paginationMeta: PaginationMeta!
}

type Mutation {
  acceptFriendRequest(userId: Float!): FriendHistory!
  cancelRequest(friendId: Float!): Boolean!
  connect: User!
  createDiscussion(data: CreateDiscussionInput!): Discussion!
  declineFriendRequest(userId: Float!): Boolean!
  disconnect: User!
  login(loginInput: LoginInput!): LoginResult!
  register(registerInput: RegisterInput!): RegisterResult!
  removeDiscussion(discussionId: Float!): Boolean!
  removeProfileImage(photoProfilePublicId: String!): RemoveProfileImageResult!
  sendFriendRequest(friendId: Float!): FriendHistory!
  sendMessage(data: SendMessageInput!): Discussion!
  setCurrentPhoto(publicId: String!): Boolean!
  updateAccount(updateAccountInput: UpdateAccountInput!): UpdateAccountResult!
  uploadProfileImage(file: Upload!): PhotoProfile
  viewMessage(messageId: Float!): Message!
}

input PaginationInput {
  limit: Float = 10
  page: Float = 1
}

type PaginationMeta {
  currentPage: Float!
  itemCount: Float!
  itemsPerPage: Float!
  totalItems: Float!
  totalPages: Float!
}

type PhotoProfile {
  current: Boolean!
  id: Float!
  publicId: String!
  url: String!
}

type Query {
  friendRequests: [User!]!
  friends: [User!]!
  friendSuggestion: [User!]!
  hello: String!
  me: User!
  messages(discussionId: Float!, paginationInput: PaginationInput!): MessagesResult!
  userDiscussions: [Discussion!]!
}

type RegisterError {
  fieldEmpty: String
  usernameNotAvailable: String
}

input RegisterInput {
  password: String!
  username: String!
}

union RegisterResult = RegisterError | User

type RemoveProfileImageError {
  notUserPhoto: String!
}

type RemoveProfileImageOk {
  status: Boolean!
}

union RemoveProfileImageResult = RemoveProfileImageError | RemoveProfileImageOk

input SendMessageInput {
  content: String!
  discussionId: Float!
}

type Subscription {
  acceptFriendRequestEvent: FriendHistory!
  connectEvent: User!
  declineFriendRequestEvent: FriendHistory!
  disconnectEvent: User!
  sendFriendRequestEvent: FriendHistory!
  sendMessageEvent(userId: Float!): Discussion!
}

type UpdateAccountError {
  cannotUpdateTheSameInfo: String
  usernameNotAvailable: String
}

input UpdateAccountInput {
  password: String!
  statusConnected: Boolean!
  username: String!
}

union UpdateAccountResult = UpdateAccountError | User

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  currentPhoto: PhotoProfile
  id: Float!
  photos: [PhotoProfile!]!
  requested: Boolean!
  statusConnected: Boolean!
  username: String!
}
