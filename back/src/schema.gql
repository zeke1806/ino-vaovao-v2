# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Discussion {
  id: Float!
  name: String
}

type FriendHistory {
  accepted: Boolean!
  friend: User!
  user: User!
}

type LoginError {
  incorrectInfo: String!
}

input LoginInput {
  password: String!
  username: String!
}

union LoginResult = LoginError | LoginToken

type LoginToken {
  token: String!
}

type Mutation {
  acceptFriendRequest(userId: Float!): FriendHistory!
  connect: User!
  declineFriendRequest(userId: Float!): Boolean!
  disconnect: User!
  login(loginInput: LoginInput!): LoginResult!
  register(registerInput: RegisterInput!): RegisterResult!
  removeDiscussion(id: Float!): Discussion!
  removeProfileImage(photoProfilePublicId: String!): RemoveProfileImageResult!
  saveDiscussion(discussionData: SaveDiscussionInput!): Discussion!
  sendFriendRequest(friendId: Float!): FriendHistory!
  setCurrentPhoto(publicId: String!): Boolean!
  updateAccount(updateAccountInput: UpdateAccountInput!): UpdateAccountResult!
  uploadProfileImage(file: Upload!): PhotoProfile
}

type PhotoProfile {
  current: Boolean!
  id: Float!
  publicId: String!
  url: String!
}

type Query {
  friendRequests: [User!]!
  friendSuggestion: [User!]!
  hello: String!
  me: User!
}

type RegisterError {
  fieldEmpty: String
  usernameNotAvailable: String
}

input RegisterInput {
  password: String!
  username: String!
}

union RegisterResult = RegisterError | User

type RemoveProfileImageError {
  notUserPhoto: String!
}

type RemoveProfileImageOk {
  status: Boolean!
}

union RemoveProfileImageResult = RemoveProfileImageError | RemoveProfileImageOk

input SaveDiscussionInput {
  id: Float
  name: String
}

type Subscription {
  acceptFriendRequestEvent: FriendHistory!
  connectEvent: User!
  disconnectEvent: User!
  sendFriendRequestEvent: FriendHistory!
}

type UpdateAccountError {
  cannotUpdateTheSameInfo: String
  usernameNotAvailable: String
}

input UpdateAccountInput {
  password: String!
  statusConnected: Boolean!
  username: String!
}

union UpdateAccountResult = UpdateAccountError | User

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  currentPhoto: PhotoProfile
  id: Float!
  photos: [PhotoProfile!]!
  statusConnected: Boolean!
  username: String!
}
